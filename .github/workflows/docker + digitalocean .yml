name: Docker CI/CD Pipeline

# Xác định sự kiện trigger cho pipeline, trong trường hợp này là push lên nhánh develop
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
env:
  PORT: 8000
permissions:
  contents: write

    
  

# Định nghĩa các jobs cần thực hiện 
jobs:
   # Job 1: build và test
   # Job thực thi trên máy ảo ubuntu
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        # Sử dụng action "checkout" để sao copy code từ repository vào máy ảo Ubuntu
        uses: actions/checkout@v2

      - name: Login to Docker Hub
          # Sử dụng action "docker/login-action" để đăng nhập vào Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and test
        # Build và test image được build ra bằng Docker 
        run: |
          docker build -t demo-react-app .
          docker run demo-react-app npm run build
      - name: Push image to Docker Hub
        uses: docker/build-push-action@v2
        # Sử dụng action "docker/build-push-action" để đẩy image lên Docker Hub
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/demo-react-app:lastest${{ github.sha }}
  deploy:
        needs: build_and_test
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v2

            

            - name: Deploy
              uses: peaceiris/actions-gh-pages@v3
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  publish_dir: ./dist
                  publish_branch: gh-pages
  test:
        needs: deloy
        runs-on: windows-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3.0
            - name: Katalon Studio Github Action
              uses: katalon-studio/katalon-studio-github-action@v3.0
              with:
                  version: '7.5.5'
                  projectPath: '${{ github.workspace }}'
                  args: '-noSplash -retry=0 -testSuiteCollectionPath="Test Suites/New Test Suite" -apiKey= ${{ secrets.API_KEY }} --config -webui.autoUpdateDrivers=true -sendMail=<20120263@student.hcmus.edu.vn>'
     # deloy
   # deloy:
   #   needs: build_and_test

   #   runs-on: ubuntu-latest

   #   steps:
   #     - name: Checkout files
   #       uses: actions/checkout@v2

   #     - name: Get tag name
   #       uses: olegtarasov/get-tag@v2

   #     - name: Install doctl
   #       uses: digitalocean/action-doctl@v2
   #       with: 
   #         token: ${{ secret.DIGITALOCEAN_ACCESS_TOKEN}}

  # deploy:
  #   needs: build_and_test
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Deploy
  #       uses: Appleboy/ssh-action@master
  #       with:
  #         host: ${{secrets.SERVER_HOST}} # IP address of the server you wish to ssh into
  #         key: ${{secrets.SSH_PRIVATE_KEY}} # Private or public key of the server
  #         username: ${{ secrets.SERVER_USER }} # User of the server you want to ssh into
    
  #         script: |
  #           script: |
  #           docker stop demo-react-app || true
  #           docker rm demo-react-app || true
  #           docker pull ${{ secrets.DOCKERHUB_USERNAME }}/demo-react-app:latest
  #           docker run -d --name demo-react-app -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/demo-react-app:latest
 # # Job 2: Deploy
 #  deploy:
 #    needs: build_and_test
 #    runs-on: ubuntu-latest

 #    steps:
 #      - name: Deploy to server
 #       # Sử dụng action "appleboy/ssh-action" để triển khai image lên server thông qua SSH
 #        uses: appleboy/ssh-action@v0.1.3
 #        with:
 #          host: ${{ secrets.SERVER_HOST }}
 #          username: ${{ secrets.SERVER_USER }}
 #          key: ${{ secrets.SSH_PRIVATE_KEY }}
 #          script: |
 #            # Pull image mà được push lên DockerHub bên trên
 #            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/demo-react-app:${{ github.sha }}

 #            # Dừng và gỡ bỏ container hiện tại (nếu có)
 #            docker stop reactjs-container
 #            docker rm reactjs-container 

 #            # Chạy container mới với image đã pull về bên trên
 #            docker run -d -p 80:3000 --name reactjs-container ${{ secrets.DOCKERHUB_USERNAME }}/demo-react-app:${{ github.sha }}
